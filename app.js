const
  bodyParser = require('body-parser'),
  crypto = require('crypto'),
  express = require('express'),
  request = require('request');
  FB = require('fb')
  MongoClient = require('mongodb').MongoClient;
  assert = require('assert');
  cors = require('cors')
  schedule = require('node-schedule');


  require('dotenv').load();

var apiai = require('apiai');

var app = express();
app.use(cors())
app.set('port', process.env.PORT || 5000);
app.use(bodyParser.json({ verify: verifyRequestSignature }));



var app = apiai("b981b06cbf654b1cbac532445ee31203");

var request = app.textRequest('Calendar', {
    sessionId: '<unique session id>'
});

request.on('response', function(response) {
  response = [
    {text: : "hi"}
  ]
    console.log(response);
});

request.on('error', function(error) {
    console.log(error);
});

request.end();














/*
 * Be sure to setup your config values before running this code. You can
 * set them using environment variables.
 *
 * APP_SECRET can be retrieved from the App Dashboard
 * VERIFY_TOKEN can be any arbitrary value used to validate a webhook
 * ACCESS_TOKEN is generated by creating a new Custom Integration
 *
 */
//
const
  APP_SECRET = "40b0a63b7fbd15af605b86413bb718ef",
  VERIFY_TOKEN = "noknoijibjib",
  ACCESS_TOKEN = "DQVJ0Q0I0TDV4VTRQU3A4alhEOTVaUVFOTHJ2VzVQQXBOODJWYkdtUXdiWGU4YVlRTi1SelFhS3NfQjJuTXZAmaVN2alBpRk41TjkxaF9LQV9mRnBRc184dTJxN0dJaHNTR1FCSHFQUFBNQmNmTms0SnJZAZAXJzcVRFRlZAfTW53c0xhUVVISm5HdUtlaFpMalVGS1NocllRMHBHUU15Nm1ZAbnFNZAXRNYkptbW9Qbms3NVgxY0NBdjN5Q2I3eDZAESTJjdUxPeHl3";

if (!(APP_SECRET && VERIFY_TOKEN && ACCESS_TOKEN)) {
  console.log(APP_SECRET);
  console.log(VERIFY_TOKEN);
  console.log(ACCESS_TOKEN);
  console.error('Missing config values');
  process.exit(1);
}


app.get('/', function(req, res) {
  if (req.query['hub.mode'] === 'subscribe' &&
      req.query['hub.verify_token'] === VERIFY_TOKEN) {
    console.log('Validating webhook');
    res.status(200).send(req.query['hub.challenge']);
  } else {
    console.error('Failed validation. Make sure the validation tokens match.');
    res.sendStatus(403);
  }
});

app.post('/web', function(req, res) {
  var message = req.body.message
  res.header("Access-Control-Allow-Origin", "*")
  res.setHeader('Content-Type', 'application/json');
  var resp = {
    "message": message+'reply'
  }
  res.status(200)
  console.log('post web')
  console.log(resp)
  res.json(resp)
})

/*
 * All callbacks for webhooks are POST-ed. They will be sent to the same
 * webhook. Be sure to subscribe your app to your page to receive callbacks.
 *
 * On Workplace, webhooks can be sent for 'page', 'group' and
 * 'workplace_security' objects:
 *
 * 'Page' webhooks relate to page messages or mentions, where the page ID is
 * the ID of the bot the user is interacting with.
 *
 * 'Group' webhooks relate to updates in a specific Workplace group, including
 * posts, comments and group membership changes.
 *
 * 'Workplace Security' webhooks relate to security-specific events in
 * Workplace, including login, logout, password changes etc.
 *
 * https://developers.facebook.com/docs/workplace/integrations/custom-integrations/webhooks
 *
 */
app.post('/', function (req, res) {
  try{
    var data = req.body;
    // On Workplace, webhooks can be sent for page, group and
		// workplace_security objects
    switch (data.object) {
    case 'page':
      // sendTextMessage(100020773937674, 'mr nok')
      // checkReport();
      processPageEvents(data);
      break;
    case 'group':
      processGroupEvents(data);
      break;
    case 'workplace_security':
      processWorkplaceSecurityEvents(data);
      break;
    default:
      console.log('Unhandled Webhook Object', data.object);
    }
  } catch (e) {
    // Write out any exceptions for now
    console.error(e);
  } finally {
    // Always respond with a 200 OK for handled webhooks, to avoid retries
		// from Facebook
    res.sendStatus(200);
  }
});

function processPageEvents(data) {
  data.entry.forEach(function(entry){
    let page_id = entry.id;
		// Chat messages sent to the page
    if(entry.messaging) {
      entry.messaging.forEach(function(messaging_event){
        console.log('Page Messaging Event',page_id,messaging_event);
        console.log(messaging_event);
        console.log('--------------------------------------');
        // console.log('senderID', messaging_event.sender.id);
        console.log('--------------------------------------');
        // console.log('text', messaging_event.message.text);

        sendTextMessage(messaging_event.sender.id, messaging_event.message.text )
      });
    }
		// Page related changes, or mentions of the page
    if(entry.changes) {
      entry.changes.forEach(function(change){
        console.log('Page Change',page_id,change);
      });
    }
    else {
    }
  });
}

function getCommunityId(callback) {
  request({

    uri: 'https://graph.facebook.com/community/',
    qs: { access_token: "DQVJ0Q0I0TDV4VTRQU3A4alhEOTVaUVFOTHJ2VzVQQXBOODJWYkdtUXdiWGU4YVlRTi1SelFhS3NfQjJuTXZAmaVN2alBpRk41TjkxaF9LQV9mRnBRc184dTJxN0dJaHNTR1FCSHFQUFBNQmNmTms0SnJZAZAXJzcVRFRlZAfTW53c0xhUVVISm5HdUtlaFpMalVGS1NocllRMHBHUU15Nm1ZAbnFNZAXRNYkptbW9Qbms3NVgxY0NBdjN5Q2I3eDZAESTJjdUxPeHl3" },
    method: 'GET',
  }, function (error, response, body) {

    if (!error && response.statusCode == 200) {
      console.log('Successfully get all member')
      var id = JSON.parse(body);
      console.log("community ID", id.id );
      var communityId = id.id

      callback(communityId)
    } else {
      console.error("Unable to get community id");
      console.error(response);
      console.error(error);
    }
  });
}

function getMember(communityid, callback) {
  console.log('getMember- communityid', communityid);
  request({

    uri: 'https://graph.facebook.com/'+communityid+'/members?limit=1000',
    qs: { access_token: "DQVJ0Q0I0TDV4VTRQU3A4alhEOTVaUVFOTHJ2VzVQQXBOODJWYkdtUXdiWGU4YVlRTi1SelFhS3NfQjJuTXZAmaVN2alBpRk41TjkxaF9LQV9mRnBRc184dTJxN0dJaHNTR1FCSHFQUFBNQmNmTms0SnJZAZAXJzcVRFRlZAfTW53c0xhUVVISm5HdUtlaFpMalVGS1NocllRMHBHUU15Nm1ZAbnFNZAXRNYkptbW9Qbms3NVgxY0NBdjN5Q2I3eDZAESTJjdUxPeHl3" },
    method: 'GET',
  }, function (error, response, body) {

    if (!error && response.statusCode == 200) {
      console.log('Successfully get all member')
      var json = JSON.parse(body);
      console.log(json)
      callback(json.data)
    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });

}


// getCommunityId(comunityid =>{
//   console.log("this is communityid", comunityid);
//   getMember(comunityid, members => {
//     console.log('communityiddddddddd', comunityid);
//     // console.log("all member", members);
//     console.log("# of members", members.length);
//     // send
//     sendTextMessage(members[0].id , "hello " +members[0].name + "  this is testing sorry for inconvenience")
//
//
//     // filterUser(members)
//   })
// })


function filterUser(members) {
  for (x=0; x< members.length ; x++){
    console.log(members[x].id, members[x].name);

    sendTextMessage(members[x].id , "hello " +members[x].name + "  this is testing sorry for inconvenience")
  }

}

///////////////////test///////////////////////////////////////////////////////////////
// community id = 587195098138468
var triggerBoolean = true
var supportTeam = ["100020773937674", "100020213502811", "100008689093061"]
function checkReport() {
  console.log(triggerBoolean);
  if (reportExist(triggerBoolean)) {
    for (x = 0 ; x< supportTeam.length; x++){
      triggerBoolean = false
      console.log(supportTeam[x]);
      sendTextMessage(supportTeam[x], 'report something')
    }

  }

}
// checkReport()

function reportExist(bool) {
  if (bool) { return true}
  else{ return false}
}

///////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////GET Group in workplace/////////////////////////////////
function getGroups () {
  request({

    uri: 'https://graph.facebook.com/587195098138468/groups/',
    qs: { access_token: "DQVJ0Q0I0TDV4VTRQU3A4alhEOTVaUVFOTHJ2VzVQQXBOODJWYkdtUXdiWGU4YVlRTi1SelFhS3NfQjJuTXZAmaVN2alBpRk41TjkxaF9LQV9mRnBRc184dTJxN0dJaHNTR1FCSHFQUFBNQmNmTms0SnJZAZAXJzcVRFRlZAfTW53c0xhUVVISm5HdUtlaFpMalVGS1NocllRMHBHUU15Nm1ZAbnFNZAXRNYkptbW9Qbms3NVgxY0NBdjN5Q2I3eDZAESTJjdUxPeHl3" },
    method: 'GET',
  }, function (error, response, body) {

    if (!error && response.statusCode == 200) {
      console.log('Successfully get all groups')
      var json = JSON.parse(body);
      console.log(json)



    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });

}
//////////////////////////////////////////////////////////////////////////////////////////

///////////////////////GET NAME BY ID WORKPLACE//////////////////////////////////////////
function getName(id, callback) {
  request({

    uri: 'https://graph.facebook.com/'+id+'?fields=name',
    qs: { access_token: "DQVJ0Q0I0TDV4VTRQU3A4alhEOTVaUVFOTHJ2VzVQQXBOODJWYkdtUXdiWGU4YVlRTi1SelFhS3NfQjJuTXZAmaVN2alBpRk41TjkxaF9LQV9mRnBRc184dTJxN0dJaHNTR1FCSHFQUFBNQmNmTms0SnJZAZAXJzcVRFRlZAfTW53c0xhUVVISm5HdUtlaFpMalVGS1NocllRMHBHUU15Nm1ZAbnFNZAXRNYkptbW9Qbms3NVgxY0NBdjN5Q2I3eDZAESTJjdUxPeHl3" },
    method: 'GET',
  }, function (error, response, body) {

    if (!error && response.statusCode == 200) {
      console.log('Successfully get all groups')
      var json = JSON.parse(body);
      var name = json.name
      console.log(name);
      callback(name);



    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });


}

/////////////////////////////////////////////////////////////////////////////////////////////



function sendTextMessage(recipientId, messageText) {
  var messageData = {
    recipient: {
      id: recipientId
    },
    message: {
      text: messageText
      }
    };
    callSendAPI(messageData);

  }

  function callSendAPI(messageData) {


  request({
    uri: 'https://graph.facebook.com/v2.6/me/messages',
    qs: { access_token: "DQVJ0Q0I0TDV4VTRQU3A4alhEOTVaUVFOTHJ2VzVQQXBOODJWYkdtUXdiWGU4YVlRTi1SelFhS3NfQjJuTXZAmaVN2alBpRk41TjkxaF9LQV9mRnBRc184dTJxN0dJaHNTR1FCSHFQUFBNQmNmTms0SnJZAZAXJzcVRFRlZAfTW53c0xhUVVISm5HdUtlaFpMalVGS1NocllRMHBHUU15Nm1ZAbnFNZAXRNYkptbW9Qbms3NVgxY0NBdjN5Q2I3eDZAESTJjdUxPeHl3" },
    method: 'POST',
    json: messageData

  }, function (error, response, body) {

    if (!error && response.statusCode == 200) {


      var recipientId = body.recipient_id;
      var messageId = body.message_id;

      console.log("Successfully sent generic message with id %s to recipient %s",
        messageId, recipientId);
    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });
}













/*
 * Verify that the callback came from Facebook. Using the App Secret we
 * can verify the signature that is sent with each callback in the
 * x-hub-signature field, located in the header.
 *
 * More info: https://developers.facebook.com/docs/graph-api/webhooks#setup
 *
 */
function verifyRequestSignature(req, res, buf) {
  var signature = req.headers['x-hub-signature'];

  if (!signature) {
    // For testing, let's log an error. In production, you should throw an
    // error.
    console.error('Couldn\'t validate the signature.');
  } else {
    var elements = signature.split('=');
    var signatureHash = elements[1];

    var expectedHash = crypto.createHmac('sha1', APP_SECRET).update(buf).digest('hex');

    if (signatureHash != expectedHash) {
      throw new Error('Couldn\'t validate the request signature.');
    }
  }
}


//

// sendTextMessage(memberID)











/// mongodb
// var url = 'mongodb://localhost:27017/test';
// MongoClient.connect(url, function(err, db) {
//   assert.equal(null, err);
//   console.log("Connected correctly to server.");
//   db.close();
// });

// Start server
// Webhooks must be available via SSL with a certificate signed by a valid
// certificate authority.
app.listen(app.get('port'), function() {
  console.log('Node app is running on port', app.get('port'));
});

module.exports = app;
